/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ShiftService } from "../shift.service";
import { ShiftCreateInput } from "./ShiftCreateInput";
import { Shift } from "./Shift";
import { ShiftFindManyArgs } from "./ShiftFindManyArgs";
import { ShiftWhereUniqueInput } from "./ShiftWhereUniqueInput";
import { ShiftUpdateInput } from "./ShiftUpdateInput";

export class ShiftControllerBase {
  constructor(protected readonly service: ShiftService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Shift })
  async createShift(@common.Body() data: ShiftCreateInput): Promise<Shift> {
    return await this.service.createShift({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateTime: true,
        smKey: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Shift] })
  @ApiNestedQuery(ShiftFindManyArgs)
  async shifts(@common.Req() request: Request): Promise<Shift[]> {
    const args = plainToClass(ShiftFindManyArgs, request.query);
    return this.service.shifts({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateTime: true,
        smKey: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Shift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async shift(
    @common.Param() params: ShiftWhereUniqueInput
  ): Promise<Shift | null> {
    const result = await this.service.shift({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        dateTime: true,
        smKey: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Shift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateShift(
    @common.Param() params: ShiftWhereUniqueInput,
    @common.Body() data: ShiftUpdateInput
  ): Promise<Shift | null> {
    try {
      return await this.service.updateShift({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateTime: true,
          smKey: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Shift })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteShift(
    @common.Param() params: ShiftWhereUniqueInput
  ): Promise<Shift | null> {
    try {
      return await this.service.deleteShift({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          dateTime: true,
          smKey: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
